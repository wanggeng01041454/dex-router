// This file is @generated by prost-build.
/// 询价请求消息
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QuotePriceRequest {
    /// 输入币种地址，base58编码
    #[prost(string, tag = "1")]
    pub input_mint: ::prost::alloc::string::String,
    /// 输出币种地址，base58编码
    #[prost(string, tag = "2")]
    pub output_mint: ::prost::alloc::string::String,
    /// base代币数量
    #[prost(string, tag = "3")]
    pub amount: ::prost::alloc::string::String,
    /// amount 是指定的 input_mint 还是 output_mint
    #[prost(bool, tag = "4")]
    pub is_base_input: bool,
    /// 固定为 V0, todo: 删除
    #[prost(enumeration = "TxVersion", tag = "5")]
    pub tx_version: i32,
    /// 滑点，以 0.01% 为基点
    #[prost(int64, tag = "6")]
    pub slippage_bps: i64,
}
/// ApiSwapV1OutSuccess 表示成功的交换响应
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QuotePriceResponse {
    #[prost(message, optional, tag = "1")]
    pub result: ::core::option::Option<super::base::CommonResult>,
    /// 'V0' 或 'V1'
    #[prost(string, tag = "2")]
    pub version: ::prost::alloc::string::String,
    /// 毫秒时间戳
    #[prost(uint64, tag = "3")]
    pub open_time: u64,
    /// 交换的具体数据
    #[prost(message, optional, tag = "4")]
    pub data: ::core::option::Option<SwapV1Out>,
}
/// 询价响应消息
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SwapV1Out {
    /// 使用 enum 类型
    #[prost(enumeration = "swap_v1_out::SwapType", tag = "1")]
    pub swap_type: i32,
    #[prost(string, tag = "2")]
    pub input_mint: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub input_amount: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub output_mint: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub output_amount: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub other_amount_threshold: ::prost::alloc::string::String,
    /// 滑点，以 0.01% 为基点
    #[prost(int64, tag = "7")]
    pub slippage_bps: i64,
    /// todo: 这里应该是约定好的定点数吧？
    ///
    /// 使用 double 对应 TypeScript 的 number
    #[prost(int64, tag = "8")]
    pub price_impact_pct: i64,
    /// 数组类型使用 repeated
    #[prost(message, repeated, tag = "9")]
    pub route_plan: ::prost::alloc::vec::Vec<swap_v1_out::RoutePlan>,
}
/// Nested message and enum types in `SwapV1Out`.
pub mod swap_v1_out {
    #[derive(serde::Serialize, serde::Deserialize)]
    #[serde(rename_all = "camelCase")]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct RoutePlan {
        #[prost(string, tag = "1")]
        pub pool_id: ::prost::alloc::string::String,
        #[prost(string, tag = "2")]
        pub input_mint: ::prost::alloc::string::String,
        #[prost(string, tag = "3")]
        pub output_mint: ::prost::alloc::string::String,
        #[prost(string, tag = "4")]
        pub fee_mint: ::prost::alloc::string::String,
        /// todo: uint32 才合适
        ///
        /// 使用 int32 对应 TypeScript 的 number
        #[prost(int32, tag = "5")]
        pub fee_rate: i32,
        #[prost(string, tag = "6")]
        pub fee_amount: ::prost::alloc::string::String,
        /// 表示询价计算过中涉及的账户
        ///
        /// 可选字段使用 repeated
        #[prost(string, repeated, tag = "7")]
        pub remaining_accounts: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
        /// 可选字段
        #[prost(string, tag = "8")]
        pub last_pool_price_x64: ::prost::alloc::string::String,
    }
    /// todo: 直接修改为布尔值？
    #[derive(serde::Serialize, serde::Deserialize)]
    #[serde(rename_all = "camelCase")]
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum SwapType {
        /// 对应 "BaseIn"
        BaseInUnspecified = 0,
        /// 对应 "BaseOut"
        BaseOutUnspecified = 1,
    }
    impl SwapType {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::BaseInUnspecified => "SWAP_TYPE_BASE_IN_UNSPECIFIED",
                Self::BaseOutUnspecified => "SWAP_TYPE_BASE_OUT_UNSPECIFIED",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "SWAP_TYPE_BASE_IN_UNSPECIFIED" => Some(Self::BaseInUnspecified),
                "SWAP_TYPE_BASE_OUT_UNSPECIFIED" => Some(Self::BaseOutUnspecified),
                _ => None,
            }
        }
    }
}
/// CreateSwapTransactionRequest 包含创建交换交易所需的参数
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateSwapTransactionRequest {
    /// 钱包地址
    #[prost(string, tag = "1")]
    pub wallet: ::prost::alloc::string::String,
    /// 交易优先费 计算单元价格（以微 lamports 为单位）
    #[prost(string, tag = "2")]
    pub compute_unit_price_micro_lamports: ::prost::alloc::string::String,
    /// 询价的返回
    #[prost(message, optional, tag = "3")]
    pub swap_response: ::core::option::Option<SwapV1Out>,
    /// 交易版本（V0 或 LEGACY）
    #[prost(enumeration = "TxVersion", tag = "4")]
    pub tx_version: i32,
    /// 是否要封装为 sol
    #[prost(bool, tag = "5")]
    pub wrap_sol: bool,
    /// 是否要解封为 sol
    #[prost(bool, tag = "6")]
    pub unwrap_sol: bool,
    /// 可选 输入的 token 账户
    #[prost(string, tag = "7")]
    pub input_account: ::prost::alloc::string::String,
    /// 可选 接收的 token 账户
    #[prost(string, tag = "8")]
    pub output_account: ::prost::alloc::string::String,
}
/// CreateSwapTransactionResponse 返回生成的交易数据
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateSwapTransactionResponse {
    #[prost(message, optional, tag = "1")]
    pub result: ::core::option::Option<super::base::CommonResult>,
    /// 交易数据列表å
    #[prost(message, repeated, tag = "2")]
    pub data: ::prost::alloc::vec::Vec<TransactionData>,
}
/// TransactionData 表示单个交易数据
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TransactionData {
    /// base64 编码的交易数据
    #[prost(string, tag = "1")]
    pub transaction: ::prost::alloc::string::String,
}
/// TxVersion 定义了交易的版本类型
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum TxVersion {
    /// 新版本交易格式
    V0 = 0,
    /// 旧版本交易格式
    Legacy = 1,
}
impl TxVersion {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::V0 => "V0",
            Self::Legacy => "LEGACY",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "V0" => Some(Self::V0),
            "LEGACY" => Some(Self::Legacy),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod router_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct RouterServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl RouterServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> RouterServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> RouterServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            RouterServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// 询价服务
        pub async fn quote_price(
            &mut self,
            request: impl tonic::IntoRequest<super::QuotePriceRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QuotePriceResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/router.RouterService/QuotePrice",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("router.RouterService", "QuotePrice"));
            self.inner.unary(req, path, codec).await
        }
        /// 构建交易：生成用于交换的交易数据
        pub async fn create_swap_transaction(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateSwapTransactionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CreateSwapTransactionResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/router.RouterService/CreateSwapTransaction",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("router.RouterService", "CreateSwapTransaction"),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod router_service_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with RouterServiceServer.
    #[async_trait]
    pub trait RouterService: std::marker::Send + std::marker::Sync + 'static {
        /// 询价服务
        async fn quote_price(
            &self,
            request: tonic::Request<super::QuotePriceRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QuotePriceResponse>,
            tonic::Status,
        >;
        /// 构建交易：生成用于交换的交易数据
        async fn create_swap_transaction(
            &self,
            request: tonic::Request<super::CreateSwapTransactionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CreateSwapTransactionResponse>,
            tonic::Status,
        >;
    }
    #[derive(Debug)]
    pub struct RouterServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> RouterServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for RouterServiceServer<T>
    where
        T: RouterService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/router.RouterService/QuotePrice" => {
                    #[allow(non_camel_case_types)]
                    struct QuotePriceSvc<T: RouterService>(pub Arc<T>);
                    impl<
                        T: RouterService,
                    > tonic::server::UnaryService<super::QuotePriceRequest>
                    for QuotePriceSvc<T> {
                        type Response = super::QuotePriceResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::QuotePriceRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as RouterService>::quote_price(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = QuotePriceSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/router.RouterService/CreateSwapTransaction" => {
                    #[allow(non_camel_case_types)]
                    struct CreateSwapTransactionSvc<T: RouterService>(pub Arc<T>);
                    impl<
                        T: RouterService,
                    > tonic::server::UnaryService<super::CreateSwapTransactionRequest>
                    for CreateSwapTransactionSvc<T> {
                        type Response = super::CreateSwapTransactionResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CreateSwapTransactionRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as RouterService>::create_swap_transaction(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CreateSwapTransactionSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(
                            tonic::body::Body::default(),
                        );
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for RouterServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "router.RouterService";
    impl<T> tonic::server::NamedService for RouterServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
